{% extends 'base.html.twig' %}
{% block body %}
    <div class="row align-items-center h-100" id="viewer">
        <div class="m-auto" id="ctnpdf">
            <span id="pdf-pager"><span id="page_num"></span> / <span id="page_count"></span></span>
            <div id="prev"><i class="fas fa-arrow-left fa-2x"></i></div>
            <div id="next"><i class="fas fa-arrow-right fa-2x"></i></div>
            <canvas id="the-canvas" class=" shadow rounded overflow-hidden m-auto" style="max-width: 75vw;max-height: calc(100vh - 100px)"></canvas>

        </div>
    </div>
{% endblock %}
{% block javascripts %}
    <script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>
    <script>
        // If absolute URL from the remote server is provided, configure the CORS
        // header on that server.
        var url = '{{ asset('pdf/'~ cours.pdf) }}';

        // Loaded via <script> tag, create shortcut to access PDF.js exports.
        var pdfjsLib = window['pdfjs-dist/build/pdf'];

        // The workerSrc property shall be specified.
        pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';

        var pdfDoc = null,
            pageNum = 1,
            pageRendering = false,
            pageNumPending = null,
            scale = 2,
            canvas = document.getElementById('the-canvas'),
            ctx = canvas.getContext('2d');

        /**
         * Get page info from document, resize canvas accordingly, and render page.
         * @param num Page number.
         */
        function renderPage(num) {
            pageRendering = true;
            // Using promise to fetch the page
            pdfDoc.getPage(num).then(function (page) {
                $('#overlay-load').fadeOut();
                var viewport = page.getViewport({scale: scale});
                if(viewport.height > viewport.width){
                   canvas.remove;
                   $('#ctnpdf').html('<embed src="{{ asset('pdf/'~ cours.pdf) }}#toolbar=0&navpanes=0&scrollbar=0" type="application/pdf" width="'+$('#viewer').width()+'" height="'+$('#viewer').height()+'"/>')
                    $('#sidebarToggle').addClass('toggled');
                    return false;
                }
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);

                // Wait for rendering to finish
                renderTask.promise.then(function () {
                    pageRendering = false;
                    if (pageNumPending !== null) {
                        // New page rendering is pending
                        renderPage(pageNumPending);
                        pageNumPending = null;
                    }
                });
            });

            // Update page counters
            document.getElementById('page_num').textContent = num;
        }

        /**
         * If another page rendering in progress, waits until the rendering is
         * finised. Otherwise, executes rendering immediately.
         */
        function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        }

        /**
         * Displays previous page.
         */
        function onPrevPage() {
            if (pageNum <= 1) {
                return;
            }
            pageNum--;
            queueRenderPage(pageNum);
        }

        document.getElementById('prev').addEventListener('click', onPrevPage);

        /**
         * Displays next page.
         */
        function onNextPage() {
            if (pageNum >= pdfDoc.numPages) {
                return;
            }
            pageNum++;
            queueRenderPage(pageNum);
        }

        document.getElementById('next').addEventListener('click', onNextPage);

        /**
         * Asynchronously downloads PDF.
         */
        pdfjsLib.getDocument(url).promise.then(function (pdfDoc_) {
            pdfDoc = pdfDoc_;
            document.getElementById('page_count').textContent = pdfDoc.numPages;

            // Initial/first page rendering
            renderPage(pageNum);

        });

    </script>
{% endblock %}